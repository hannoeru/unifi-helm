# Default values for unifi.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: linuxserver/unifi-network-application
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  # s6-overlay requires root to initialize, then drops to PUID/PGID
  runAsUser: 0
  runAsGroup: 0
  # Set volume ownership to UniFi user (1000)
  fsGroup: 1000

securityContext: {}
  # Allow s6-overlay to drop privileges after initialization
  # allowPrivilegeEscalation: true
  # capabilities:
  #   add:
  #     # Required for s6-overlay to switch user/group contexts
  #     - SETGID
  #     - SETUID
  #     # Required for file permission management during initialization
  #     - DAC_OVERRIDE

service:
  type: ClusterIP
  # UniFi Controller ports (based on official documentation)
  deviceControl: 8080      # Device command/control (required)
  webInterface: 8443       # Web interface + API (required)
  stun: 3478              # STUN service (required)
  httpsPortal: 8843       # HTTPS portal (optional)
  httpPortal: 8880        # HTTP portal (optional)
  speedtest: 6789         # Speed Test (unifi5 only) (optional)
  discovery: 10001        # Device discovery (optional)

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: unifi.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: unifi-tls
  #    hosts:
  #      - unifi.local

# Captive Portal configuration (for guest network portal)
captivePortal:
  enabled: false
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: captive.unifi.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
    #  - secretName: captive-portal-tls
    #    hosts:
    #      - captive.unifi.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 1000m
  #   memory: 1024Mi
  # requests:
  #   cpu: 500m
  #   memory: 512Mi

persistence:
  enabled: true
  # existingClaim: ""
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 8Gi
  annotations: {}

nodeSelector: {}

tolerations: []

affinity: {}

# ServiceMonitor configuration for Prometheus monitoring
serviceMonitor:
  enabled: false
  # Prometheus instance selector
  # If empty, the ServiceMonitor will be selected by any Prometheus instance
  # If specified, only Prometheus instances with matching labels will scrape this ServiceMonitor
  selector: {}
  # Additional labels for the ServiceMonitor
  labels: {}
  # Additional annotations for the ServiceMonitor
  annotations: {}
  # Scrape interval
  interval: "30s"
  # Scrape timeout
  scrapeTimeout: "10s"
  # Metrics path
  path: "/status"
  # Target port - should match the service port name or number
  targetPort: "web-interface"
  # HTTP scheme (http or https)
  scheme: "https"
  # TLS configuration for scraping HTTPS endpoints
  tlsConfig:
    # Skip TLS certificate verification
    insecureSkipVerify: true
  # Additional scrape parameters
  params: {}
  # Relabeling rules
  relabelings: []
  # Metric relabeling rules
  metricRelabelings: []

# Network Policy configuration
networkPolicy:
  enabled: false
  # Ingress rules for the UniFi controller
  ingress:
    # Allow ingress from all pods in the same namespace
    - from:
        - podSelector: {}
    # Allow ingress from specific IP ranges (example)
    # - from:
    #     - ipBlock:
    #         cidr: 10.0.0.0/8
  # Egress rules for the UniFi controller
  egress:
    # Allow all egress traffic by default
    - {}

# PodDisruptionBudget configuration
podDisruptionBudget:
  enabled: false
  # minAvailable: 1
  # maxUnavailable: 1

# UniFi specific configuration (LinuxServer image)
unifi:
  # LinuxServer container configuration
  timezone: "Etc/UTC"
  puid: 1000
  pgid: 1000

  # Network port configuration
  ports:
    https: 8443
    http: 8080
    stun: 3478
    discovery: 10001
  # Additional environment variables
  extraEnv: []
  # - name: CUSTOM_VAR
  #   value: "custom_value"

# Extra objects to deploy (can include any Kubernetes resources)
# Supports Helm templating and can access all chart values
extraObjects: []
# Examples:
# - apiVersion: v1
#   kind: ConfigMap
#   metadata:
#     name: "{{ include "unifi.fullname" . }}-extra-config"
#     labels:
#       {{- include "unifi.labels" . | nindent 6 }}
#   data:
#     config.yaml: |
#       key: value
# - apiVersion: v1
#   kind: Secret
#   metadata:
#     name: "{{ include "unifi.fullname" . }}-extra-secret"
#   type: Opaque
#   data:
#     password: "{{ .Values.customPassword | b64enc }}"

# Database configuration
# Choose one of the following options:
# 1. Bitnami MongoDB subchart (recommended)
# 2. External Database (connect to existing MongoDB instance)

# Bitnami MongoDB subchart configuration
mongodb:
  enabled: false
  # MongoDB architecture (standalone or replicaset)
  architecture: standalone
  # Authentication configuration
  auth:
    enabled: true
    rootPassword: "password"
    usernames: ["unifi"]
    passwords: ["password"]
    databases: ["unifi"]
  passwordUpdateJob:
    enabled: true
  # Storage configuration
  persistence:
    enabled: true
    size: 8Gi
    storageClass: ""
  # MongoDB initialization scripts
  initdbScripts:
    unifi.sh: |
        #!/bin/bash
        mongosh <<EOF
        use admin
        db.auth("${MONGODB_ROOT_USER}", "${MONGODB_ROOT_PASSWORD}")
        db.createUser({
          user: "${MONGODB_EXTRA_USERNAMES}",
          pwd: "${MONGODB_EXTRA_PASSWORDS}",
          roles: [
            { db: "${MONGODB_EXTRA_DATABASES}", role: "dbOwner" },
            { db: "${MONGODB_EXTRA_DATABASES}_stat", role: "dbOwner" },
            { db: "${MONGODB_EXTRA_DATABASES}_audit", role: "dbOwner" }
          ]
        })
        EOF

# External Database configuration
# Use this when connecting to an existing MongoDB instance
externalDatabase:
  enabled: false
  # MongoDB connection details
  host: "mongodb.example.com"
  port: 27017
  database: "unifi"
  # Authentication
  username: "unifi"
  # Password can be provided via existing secret or plain text
  password: ""
  # Use existing secret for password (recommended)
  existingSecret: ""
  passwordKey: "password"
  # Authentication source database
  authSource: "admin"
  # Connection options
  options: ""  # Additional MongoDB connection string options (e.g., "ssl=true&replicaSet=rs0")
  # TLS/SSL configuration
  tls:
    enabled: false
    # Use existing secret for TLS certificates
    existingSecret: ""
    caKey: "ca.crt"
    certKey: "tls.crt"
    keyKey: "tls.key"
